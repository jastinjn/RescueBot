/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package rob550.lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class particle_t implements lcm.lcm.LCMEncodable
{
    public rob550.lcmtypes.pose_xyt_t pose;
    public rob550.lcmtypes.pose_xyt_t parent_pose;
    public double weight;
 
    public particle_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x18016676f01f14e8L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(rob550.lcmtypes.particle_t.class))
            return 0L;
 
        classes.add(rob550.lcmtypes.particle_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + rob550.lcmtypes.pose_xyt_t._hashRecursive(classes)
             + rob550.lcmtypes.pose_xyt_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        this.pose._encodeRecursive(outs); 
 
        this.parent_pose._encodeRecursive(outs); 
 
        outs.writeDouble(this.weight); 
 
    }
 
    public particle_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public particle_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static rob550.lcmtypes.particle_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        rob550.lcmtypes.particle_t o = new rob550.lcmtypes.particle_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.pose = rob550.lcmtypes.pose_xyt_t._decodeRecursiveFactory(ins);
 
        this.parent_pose = rob550.lcmtypes.pose_xyt_t._decodeRecursiveFactory(ins);
 
        this.weight = ins.readDouble();
 
    }
 
    public rob550.lcmtypes.particle_t copy()
    {
        rob550.lcmtypes.particle_t outobj = new rob550.lcmtypes.particle_t();
        outobj.pose = this.pose.copy();
 
        outobj.parent_pose = this.parent_pose.copy();
 
        outobj.weight = this.weight;
 
        return outobj;
    }
 
}

