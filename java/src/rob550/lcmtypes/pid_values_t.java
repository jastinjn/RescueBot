/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package rob550.lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class pid_values_t implements lcm.lcm.LCMEncodable
{
    public float motor_a_kp;
    public float motor_a_ki;
    public float motor_a_kd;
    public float motor_a_Tf;
    public float motor_b_kp;
    public float motor_b_ki;
    public float motor_b_kd;
    public float motor_b_Tf;
    public float motor_c_kp;
    public float motor_c_ki;
    public float motor_c_kd;
    public float motor_c_Tf;
    public float bf_trans_kp;
    public float bf_trans_ki;
    public float bf_trans_kd;
    public float bf_trans_Tf;
    public float bf_rot_kp;
    public float bf_rot_ki;
    public float bf_rot_kd;
    public float bf_rot_Tf;
 
    public pid_values_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xbdbad1235b5e51cdL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(rob550.lcmtypes.pid_values_t.class))
            return 0L;
 
        classes.add(rob550.lcmtypes.pid_values_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeFloat(this.motor_a_kp); 
 
        outs.writeFloat(this.motor_a_ki); 
 
        outs.writeFloat(this.motor_a_kd); 
 
        outs.writeFloat(this.motor_a_Tf); 
 
        outs.writeFloat(this.motor_b_kp); 
 
        outs.writeFloat(this.motor_b_ki); 
 
        outs.writeFloat(this.motor_b_kd); 
 
        outs.writeFloat(this.motor_b_Tf); 
 
        outs.writeFloat(this.motor_c_kp); 
 
        outs.writeFloat(this.motor_c_ki); 
 
        outs.writeFloat(this.motor_c_kd); 
 
        outs.writeFloat(this.motor_c_Tf); 
 
        outs.writeFloat(this.bf_trans_kp); 
 
        outs.writeFloat(this.bf_trans_ki); 
 
        outs.writeFloat(this.bf_trans_kd); 
 
        outs.writeFloat(this.bf_trans_Tf); 
 
        outs.writeFloat(this.bf_rot_kp); 
 
        outs.writeFloat(this.bf_rot_ki); 
 
        outs.writeFloat(this.bf_rot_kd); 
 
        outs.writeFloat(this.bf_rot_Tf); 
 
    }
 
    public pid_values_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public pid_values_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static rob550.lcmtypes.pid_values_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        rob550.lcmtypes.pid_values_t o = new rob550.lcmtypes.pid_values_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.motor_a_kp = ins.readFloat();
 
        this.motor_a_ki = ins.readFloat();
 
        this.motor_a_kd = ins.readFloat();
 
        this.motor_a_Tf = ins.readFloat();
 
        this.motor_b_kp = ins.readFloat();
 
        this.motor_b_ki = ins.readFloat();
 
        this.motor_b_kd = ins.readFloat();
 
        this.motor_b_Tf = ins.readFloat();
 
        this.motor_c_kp = ins.readFloat();
 
        this.motor_c_ki = ins.readFloat();
 
        this.motor_c_kd = ins.readFloat();
 
        this.motor_c_Tf = ins.readFloat();
 
        this.bf_trans_kp = ins.readFloat();
 
        this.bf_trans_ki = ins.readFloat();
 
        this.bf_trans_kd = ins.readFloat();
 
        this.bf_trans_Tf = ins.readFloat();
 
        this.bf_rot_kp = ins.readFloat();
 
        this.bf_rot_ki = ins.readFloat();
 
        this.bf_rot_kd = ins.readFloat();
 
        this.bf_rot_Tf = ins.readFloat();
 
    }
 
    public rob550.lcmtypes.pid_values_t copy()
    {
        rob550.lcmtypes.pid_values_t outobj = new rob550.lcmtypes.pid_values_t();
        outobj.motor_a_kp = this.motor_a_kp;
 
        outobj.motor_a_ki = this.motor_a_ki;
 
        outobj.motor_a_kd = this.motor_a_kd;
 
        outobj.motor_a_Tf = this.motor_a_Tf;
 
        outobj.motor_b_kp = this.motor_b_kp;
 
        outobj.motor_b_ki = this.motor_b_ki;
 
        outobj.motor_b_kd = this.motor_b_kd;
 
        outobj.motor_b_Tf = this.motor_b_Tf;
 
        outobj.motor_c_kp = this.motor_c_kp;
 
        outobj.motor_c_ki = this.motor_c_ki;
 
        outobj.motor_c_kd = this.motor_c_kd;
 
        outobj.motor_c_Tf = this.motor_c_Tf;
 
        outobj.bf_trans_kp = this.bf_trans_kp;
 
        outobj.bf_trans_ki = this.bf_trans_ki;
 
        outobj.bf_trans_kd = this.bf_trans_kd;
 
        outobj.bf_trans_Tf = this.bf_trans_Tf;
 
        outobj.bf_rot_kp = this.bf_rot_kp;
 
        outobj.bf_rot_ki = this.bf_rot_ki;
 
        outobj.bf_rot_kd = this.bf_rot_kd;
 
        outobj.bf_rot_Tf = this.bf_rot_Tf;
 
        return outobj;
    }
 
}

